////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : SDPath.vf
// /___/   /\     Timestamp : 12/12/2024 14:49:29
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -sympath C:/SCU/SCU-Xilink_Projects/OExp05-DataPath/Code/CPU -sympath C:/SCU/SCU-Xilink_Projects/OExp05-DataPath/Code/IO -sympath C:/SCU/SCU-Xilink_Projects/OExp05-DataPath/ipcore_dir -intstyle ise -family kintex7 -verilog C:/SCU/SCU-Xilink_Projects/OExp05-DataPath/SDPath.vf -w C:/SCU/SCU-Xilink_Projects/OExp05-DataPath/SDPath.sch
//Design Name: SDPath
//Device: kintex7
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale 1ns / 1ps

module SDPath(ALUSrc_B, 
              ALU_Control, 
              Branch, 
              clk, 
              Data_in, 
              inst_field, 
              Jump, 
              MemtoReg, 
              RegDst, 
              RegWrite, 
              rst, 
              ALU_out, 
              Data_out, 
              PC_out);

    input ALUSrc_B;
    input [2:0] ALU_Control;
    input Branch;
    input clk;
    input [31:0] Data_in;
    input [25:0] inst_field;
    input Jump;
    input MemtoReg;
    input RegDst;
    input RegWrite;
    input rst;
   output [31:0] ALU_out;
   output [31:0] Data_out;
   output [31:0] PC_out;
   
   wire [31:0] Branch_addr;
   wire [29:0] Imm_32;
   wire N0;
   wire [31:0] pc_4;
   wire V5;
   wire [4:0] XLXN_20;
   wire [31:0] XLXN_21;
   wire [31:0] XLXN_32;
   wire XLXN_43;
   wire [31:0] XLXN_44;
   wire [31:0] XLXN_45;
   wire XLXN_46;
   wire [31:0] XLXN_59;
   wire [31:0] XLXN_60;
   wire XLXN_67;
   wire [31:0] ALU_out_DUMMY;
   wire [31:0] Data_out_DUMMY;
   wire [31:0] PC_out_DUMMY;
   
   assign ALU_out[31:0] = ALU_out_DUMMY[31:0];
   assign Data_out[31:0] = Data_out_DUMMY[31:0];
   assign PC_out[31:0] = PC_out_DUMMY[31:0];
   add_32  ADD_Branch (.a(pc_4[31:0]), 
                      .b({Imm_32[29:0], N0, N0}), 
                      .c(Branch_addr[31:0]));
   add_32  ADD_PC_4 (.a(PC_out_DUMMY[31:0]), 
                    .b({N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, 
         N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, V5, N0, 
         N0}), 
                    .c(pc_4[31:0]));
   Ext_32  Ext (.imm_16(inst_field[15:0]), 
               .Imm_32(XLXN_32[31:0]));
   MUX2T1_5  MUX_D1 (.I0(inst_field[20:16]), 
                    .I1(inst_field[15:11]), 
                    .s(RegDst), 
                    .o(XLXN_20[4:0]));
   MUX2T1_32  MUX_D2 (.I0(ALU_out_DUMMY[31:0]), 
                     .I1(Data_in[31:0]), 
                     .s(MemtoReg), 
                     .o(XLXN_21[31:0]));
   MUX2T1_32  MUX_D3 (.I0(Data_out_DUMMY[31:0]), 
                     .I1(XLXN_32[31:0]), 
                     .s(ALUSrc_B), 
                     .o(XLXN_44[31:0]));
   MUX2T1_32  MUX_D4 (.I0(pc_4[31:0]), 
                     .I1(Branch_addr[31:0]), 
                     .s(XLXN_67), 
                     .o(XLXN_60[31:0]));
   MUX2T1_32  MUX_D5 (.I0(XLXN_60[31:0]), 
                     .I1({pc_4[31:28], inst_field[25:0], N0, N0}), 
                     .s(Jump), 
                     .o(XLXN_59[31:0]));
   REG32  PC (.CE(V5), 
             .clk(clk), 
             .D(XLXN_59[31:0]), 
             .rst(rst), 
             .Q(PC_out_DUMMY[31:0]));
   alu  U1_1 (.A(XLXN_45[31:0]), 
             .ALU_Ctr(ALU_Control[2:0]), 
             .B(XLXN_44[31:0]), 
             .overflow(XLXN_46), 
             .res(ALU_out_DUMMY[31:0]), 
             .zero(XLXN_43));
   Regs  U2_2 (.clk(clk), 
              .L_S(RegWrite), 
              .rst(rst), 
              .R_addr_A(inst_field[25:21]), 
              .R_addr_B(inst_field[20:16]), 
              .Wt_addr(XLXN_20[4:0]), 
              .Wt_data(XLXN_21[31:0]), 
              .rdata_A(XLXN_45[31:0]), 
              .rdata_B(Data_out_DUMMY[31:0]));
   VCC  XLXI_14 (.P(V5));
   AND2  XLXI_16 (.I0(XLXN_43), 
                 .I1(Branch), 
                 .O(XLXN_67));
   GND  XLXI_19 (.G(N0));
endmodule
